<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * ObservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObservationRepository extends \Doctrine\ORM\EntityRepository
{
    /* Recherche Maps */

    public function getObservationBySpecies($criteria){
        // Création de l'alias
        $qb = $this->createQueryBuilder('o');

        if ($criteria['begin'] == null) {
            $qb->where('o.species = :criteria')
                ->andWhere('o.validate = true')
                ->setParameter('criteria', $criteria['reference']);
        } else {
            $qb->where('o.species = :criteria')
                ->andWhere('o.observationDate BETWEEN :start AND :end ')
                ->andWhere('o.validate = true')
                ->setParameters(array(
                    'criteria' => $criteria['reference'],
                    'start' => $criteria['begin'],
                    'end' => $criteria['end']
                ));
        }

        return $qb->getQuery()->getResult();
    }

    public function getObservationByVernacularName($criteria){
        // Création de l'alias
        $qb = $this->createQueryBuilder('o');

        if ($criteria['begin'] == null) {
            $qb->where('o.species = :criteria')
                ->andWhere('o.validate = true')
                ->setParameter('criteria', $criteria['vernacular']);
        } else {
            $qb->where('o.species = :criteria')
                ->andWhere('o.observationDate BETWEEN :start AND :end ')
                ->andWhere('o.validate = true')
                ->setParameters(array(
                    'criteria' => $criteria['vernacular'],
                    'start' => $criteria['begin'],
                    'end' => $criteria['end']
                ));
        }
        return $qb->getQuery()->getResult();
    }

    public function getObservationByType($criteria){
        // Création de l'alias
        $qb = $this->createQueryBuilder('o');

        if ($criteria['begin'] == null) {
            $qb->where('o.type = :criteria')
                ->andWhere('o.validate = true')
                ->setParameter('criteria', $criteria['type']);
        } else {
            $qb->where('o.type = :criteria')
                ->andWhere('o.observationDate BETWEEN :start AND :end ')
                ->andWhere('o.validate = true')
                ->setParameters(array(
                    'criteria' => $criteria['type'],
                    'start' => $criteria['begin'],
                    'end' => $criteria['end']
                ));
        }

        return $qb->getQuery()->getResult();
    }

    public function getObservationByFamily($criteria){
        // Création de l'alias
        $qb = $this->createQueryBuilder('o');

        if ($criteria['begin'] == null) {
            $qb->where('o.family = :criteria')
                ->andWhere('o.validate = true')
                ->setParameter('criteria', $criteria['family']);
        } else {
            $qb->where('o.family = :criteria')
                ->andWhere('o.observationDate BETWEEN :start AND :end ')
                ->andWhere('o.validate = true')
                ->setParameters(array(
                    'criteria' => $criteria['family'],
                    'start' => $criteria['begin'],
                    'end' => $criteria['end']
                ));
        }

        return $qb->getQuery()->getResult();
    }

    /* Statistiques du dashboard */

    public function getValidatedObservationsByUser($user)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.validate = :validate')
            ->andWhere('o.observer = :user')
            ->setParameters(array(
                'validate' => 1,
                'user' => $user));

        return $qb
            ->getQuery()
            ->getResult();
    }
    

    public function getRefusedObservationsByUser($user)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.validate = :validate')
            ->andWhere('o.observer = :user')
            ->setParameters(array(
                'validate' => 0,
                'user' => $user));
        
        return $qb
            ->getQuery()
            ->getResult();
        
    } public function getValidatedObservationsByValidator($user)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.validate = :validate')
            ->andWhere('o.validator = :user')
            ->setParameters(array(
                'validate' => 1,
                'user' => $user));
        
        return $qb
            ->getQuery()
            ->getResult();
    }
    
     public function getRefusedObservationsByValidator($user)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.validate = :validate')
            ->andWhere('o.validator = :user')
            ->setParameters(array(
                'validate' => 0,
                'user' => $user));
        
        return $qb
            ->getQuery()
            ->getResult();
    }

    public function getSpeciesObserved()
    {
        $qb = $this->createQueryBuilder('o')
            ->select('COUNT(DISTINCT o.species)');

        return $qb
            ->getQuery()
            ->getSingleScalarResult();
    }
    
}
