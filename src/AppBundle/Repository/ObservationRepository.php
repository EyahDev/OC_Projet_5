<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * ObservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObservationRepository extends \Doctrine\ORM\EntityRepository
{
    public function getValidatedObservationsByUser($user)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.validate = :validate')
            ->andWhere('o.observer = :user')
            ->setParameters(array(
                'validate' => 1,
                'user' => $user));

        return $qb
            ->getQuery()
            ->getResult();
    }
    

    public function getRefusedObservationsByUser($user)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.validate = :validate')
            ->andWhere('o.observer = :user')
            ->setParameters(array(
                'validate' => 0,
                'user' => $user));
        
        return $qb
            ->getQuery()
            ->getResult();
        
    } public function getValidatedObservationsByValidator($user)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.validate = :validate')
            ->andWhere('o.validator = :user')
            ->setParameters(array(
                'validate' => 1,
                'user' => $user));
        
        return $qb
            ->getQuery()
            ->getResult();
    }
    
     public function getRefusedObservationsByValidator($user)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.validate = :validate')
            ->andWhere('o.validator = :user')
            ->setParameters(array(
                'validate' => 0,
                'user' => $user));
        
        return $qb
            ->getQuery()
            ->getResult();
    }

    public function getDifferentSpeciesObservations()
    {
        $qb = $this->createQueryBuilder('o')
            ->select('COUNT(DISTINCT o.species)');

        return $qb
            ->getQuery()
            ->getSingleScalarResult();
    }
    
}
